#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
set -e

indent() {
  sed -u 's/^/       /'
}

export BUILD_DIR=$1
export CACHE_DIR=$2
export ENV_DIR=$3

export NGINX_ROOT=public

# Default Hugo version
DEFAULT_HUGO_VERSION="0.145.0"
apt install golang -y
# attempt to extract the HUGO_VERSION parameter form the Heroku configuration vars, fall back to the default version if unavailable
if [ -d "$ENV_DIR" -a -e "$ENV_DIR/HUGO_VERSION" ]; then
  export HUGO_VERSION=$(cat "$ENV_DIR/HUGO_VERSION")
else
  echo "\n-----> HUGO VERSION not defined, using $DEFAULT_HUGO_VERSION."
  export HUGO_VERSION=$DEFAULT_HUGO_VERSION
fi

# Hugo URL ( download from GH builds )
RELEASE_NAME=hugo_extended_${HUGO_VERSION}_Linux-64bit
FILE_NAME=${RELEASE_NAME}.tar.gz
HUGO_PACKAGE=https://github.com/spf13/hugo/releases/download/v${HUGO_VERSION}/${FILE_NAME}

# Store the hugo package in the cache_dir ( persistent across builds )
mkdir -p $CACHE_DIR
if ! [ -e $CACHE_DIR/$FILE_NAME ]; then
  echo "-----> Fetching Hugo ${HUGO_VERSION} binaries at ${HUGO_PACKAGE}"
  curl $HUGO_PACKAGE -L -s -o $CACHE_DIR/$FILE_NAME | indent
fi

# Extract the binary in the working directory
echo "-----> Extracting Hugo ${HUGO_VERSION} binaries to ${BUILD_DIR}"
mkdir -p $CACHE_DIR/$RELEASE_NAME | indent
tar -zxvf $CACHE_DIR/$FILE_NAME -C $CACHE_DIR | indent
mv $CACHE_DIR/hugo $BUILD_DIR/hugo | indent

# Fetch a theme specified in the .hugotheme file
if [ -e $BUILD_DIR/.hugotheme ]; then
  echo "-----> Getting the theme"
  THEME_URL="`cat $BUILD_DIR/.hugotheme`"
  rm -rf $BUILD_DIR/themes && mkdir $BUILD_DIR/themes && cd $BUILD_DIR/themes
  git clone $THEME_URL
fi

# Build the site
version=`${BUILD_DIR}/hugo version`
echo "-----> Building the site using ${version}"
cd $BUILD_DIR
mkdir -p static | indent
./hugo | indent
